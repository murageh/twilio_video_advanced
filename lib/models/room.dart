import 'package:flutter/foundation.dart';
import 'package:twilio_video_advanced/models/remote_participant.dart';

import 'local_participant.dart';

/// Represents a Twilio Video room and its current state.
///
/// A room is the central entity that participants join to communicate
/// with each other through video and audio. It contains information
/// about all participants and the room's connection state.
///
/// ```dart
/// // Access room information from connected event
/// if (event is RoomConnectedEvent) {
///   final room = event.room;
///   print('Connected to room: ${room.name}');
///   print('Participants: ${room.remoteParticipants.length}');
/// }
/// ```
class Room {
  /// The name of the room.
  ///
  /// This is the room identifier that was used when connecting to the room.
  /// Multiple participants with the same room name will join the same room.
  final String name;

  /// The unique server-assigned identifier for this room.
  ///
  /// This SID is generated by Twilio and uniquely identifies this room instance.
  final String sid;

  /// The current connection state of the room.
  ///
  /// Possible values:
  /// - `0`: Connected - Successfully connected and can publish/subscribe to tracks
  /// - `1`: Connecting - Currently establishing connection to the room
  /// - `2`: Disconnected - Not connected to the room
  /// - `3`: Reconnecting - Lost connection and attempting to reconnect
  final int state;

  /// The local participant (current user) in this room.
  ///
  /// Contains information about the current user's identity, connection status,
  /// and publishing state for audio and video tracks.
  final LocalParticipant localParticipant;

  /// List of all remote participants currently in the room.
  ///
  /// This list is updated automatically as participants join and leave.
  /// Each participant represents another user connected to the same room.
  final List<RemoteParticipant> remoteParticipants;

  /// Creates a room instance.
  Room({
    required this.name,
    required this.sid,
    required this.state,
    required this.localParticipant,
    this.remoteParticipants = const [],
  });

  /// Creates a [Room] from JSON data.
  ///
  /// This is typically used internally by the plugin to deserialize
  /// room data received from the native platform when room events occur.
  factory Room.fromJson(Map<String, dynamic> json) {
    void debug(String message) {
      if (kDebugMode) {
        print('Room::DEBUG: $message');
      }
    }

    // Extract remote participants from JSON
    List<RemoteParticipant> remoteParticipants = [];
    debug('Room.fromJson: json=$json');
    debug(
      'Room.fromJson: json.remoteParticipants=${json['remoteParticipants']}',
    );
    if (json['remoteParticipants'] != null) {
      remoteParticipants =
          (json['remoteParticipants'] as List)
              .map(
                (p) => RemoteParticipant.fromJson(Map<String, dynamic>.from(p)),
              )
              .toList();
    }

    debug(
      'Room.fromJson: name=${json['name']}, sid=${json['sid']}, state=${json['state']}, localParticipant=${json['localParticipant']} remoteParticipants=${remoteParticipants.length}',
    );

    return Room(
      name: json['name'],
      sid: json['sid'],
      state: json['state'],
      localParticipant: LocalParticipant.fromJson(
        Map<String, dynamic>.from(json['localParticipant']),
      ),
      remoteParticipants: remoteParticipants,
    );
  }

  /// Prints debug information in debug mode.
  ///
  /// This method is used internally for debugging room operations
  /// and is only active when running in debug mode.
  void debug(String message) {
    if (kDebugMode) {
      print('Room::DEBUG: $message');
    }
  }
}
