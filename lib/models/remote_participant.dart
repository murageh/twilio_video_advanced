/// Represents a remote participant in a Twilio Video room.
///
/// A remote participant is another user who has joined the same video room.
/// This class contains information about the participant's identity, connection
/// status, and provides access to their published tracks.
///
/// ```dart
/// // Handle new participant joining
/// if (event is ParticipantConnectedEvent) {
///   final participant = event.participant;
///   print('${participant.identity} joined (SID: ${participant.sid})');
/// }
/// ```
class RemoteParticipant {
  /// The unique identity of the participant.
  ///
  /// This is typically a user-friendly identifier like a username or email
  /// that was specified when generating the access token for this participant.
  final String identity;

  /// The unique server-assigned identifier for this participant.
  ///
  /// This SID is generated by Twilio when the participant joins the room
  /// and remains constant for the duration of their session.
  final String sid;

  /// Whether this participant is currently connected to the room.
  ///
  /// This will be `true` when the participant is actively connected and
  /// `false` if they have disconnected or are in the process of disconnecting.
  final bool isConnected;

  /// Custom display name for this participant.
  ///
  /// This is a user-friendly name that can be set at runtime to override
  /// the default identity. If null, the identity will be used for display.
  final String? displayName;

  /// The name to display in the UI.
  ///
  /// Returns [displayName] if set, otherwise returns [identity].
  String get name => displayName ?? identity;

  /// Creates a remote participant.
  RemoteParticipant({
    required this.identity,
    required this.sid,
    required this.isConnected,
    this.displayName,
  });

  /// Creates a [RemoteParticipant] from JSON data.
  ///
  /// This is typically used internally by the plugin to deserialize
  /// participant data received from the native platform.
  factory RemoteParticipant.fromJson(Map<String, dynamic> json) {
    return RemoteParticipant(
      identity: json['identity'],
      sid: json['sid'],
      isConnected: json['isConnected'],
      displayName: json['displayName'], // This will be null from native initially
    );
  }

  /// Creates a copy of this participant with some fields replaced.
  ///
  /// This is useful for updating participant information while maintaining
  /// immutability.
  RemoteParticipant copyWith({
    String? identity,
    String? sid,
    bool? isConnected,
    String? displayName,
  }) {
    return RemoteParticipant(
      identity: identity ?? this.identity,
      sid: sid ?? this.sid,
      isConnected: isConnected ?? this.isConnected,
      displayName: displayName ?? this.displayName,
    );
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is RemoteParticipant &&
        other.identity == identity &&
        other.sid == sid &&
        other.isConnected == isConnected &&
        other.displayName == displayName;
  }

  @override
  int get hashCode {
    return identity.hashCode ^
    sid.hashCode ^
    isConnected.hashCode ^
    displayName.hashCode;
  }

  @override
  String toString() {
    return 'RemoteParticipant(identity: $identity, sid: $sid, isConnected: $isConnected, displayName: $displayName, name: $name)';
  }
}
